import{combineReducers as e,createStore as t}from"redux";import{useSelector as r}from"react-redux";function o(o){const s={},c={};let u={},n={};const d=(e,t="root")=>{const{moduleReducer:o,moduleGetters:d,moduleActions:l}=function(e,t="root"){const o={},s={},c={},u="root"===t?"":t+"/";return Object.entries(e.mutations).forEach((([e,t])=>{const r="A_"+e.toUpperCase();o[u+e]=e=>({type:r,payload:e}),s[r]=(e,r=null)=>{const o={...e};return t(o,r),o}})),Object.entries(e.getters).forEach((([e,o])=>{c[u+e]=()=>r((e=>o(e[t])))})),{moduleReducer:(t=e.state,r)=>s[r.type]?s[r.type](t,r.payload):t,moduleGetters:c,moduleActions:o}}(e,t);c[t]=e.state,s[t]=o,u={...u,...d},n={...n,...l}};d(o),o.modules&&Object.entries(o.modules).forEach((([e,t])=>d(t,e)));const l=e(s),a=t(l,c),i={reduxStore:a,commit:(e,t=null)=>a.dispatch(n[e](t)),getters:u,registerModule:(t,r)=>{d(r,t),a.replaceReducer(e(s)),i.getters=u},unregisterModule:t=>{delete s[t],a.replaceReducer(e(s)),Object.keys(i.getters).forEach((e=>e.includes(t)&&delete i.getters[e]))}};return Object.defineProperty(i,"state",{get(){const{root:e,...t}=a.getState();return{...e,...t}},enumerable:!0}),i}export{o as createReaxStore};
