import{combineReducers as e,createStore as t}from"redux";import{useSelector as r}from"react-redux";const o=(e,t)=>(r=e.state,o)=>t[o.type]?t[o.type](r,o.payload):r;function n(n){const c={},s={};let u={},a={};const l=(e,t="root")=>{const{moduleReducer:n,moduleGetters:l,moduleActions:d}=function(e,t="root"){const n={},c={},s={},u="root"===t?"":t+"/";return Object.entries(e.mutations).forEach((([e,t])=>{const r="A_"+e.toUpperCase(),{action:o,actionHandler:s}=(a=r,l=t,{action:e=>({type:a,payload:e}),actionHandler:(e,t=null)=>{const r={...e};return l(r,t),r}});var a,l;n[u+e]=o,c[r]=s})),Object.entries(e.getters).forEach((([e,o])=>{s[u+e]=()=>r((e=>o(e[t])))})),{moduleReducer:o(e,c),moduleGetters:s,moduleActions:n}}(e,t);s[t]=e.state,c[t]=n,u={...u,...l},a={...a,...d}};l(n),n.modules&&Object.entries(n.modules).forEach((([e,t])=>l(t,e)));const d=e(c),i=t(d,s),p={reduxStore:i,commit:(e,t=null)=>i.dispatch(a[e](t)),getters:u,registerModule:(t,r)=>{l(r,t),i.replaceReducer(e(c)),p.getters={...p.getters,...u}},unregisterModule:t=>{delete c[t],i.replaceReducer(e(c));for(const e in p.getters)Object.prototype.hasOwnProperty.call(p.getters,e)&&e.includes(t)&&delete p.getters[e]}};return Object.defineProperty(p,"state",{get(){const{root:e,...t}=i.getState();return{...e,...t}},enumerable:!0}),p}export{n as createReaxStore};
